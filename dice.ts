function roll(dice: number = 2): [number, string] {
	if (dice < 1) throw new Error('ダイスの個数が1個未満です');
	let result = [];
	for (let i = 0; i < dice; ++i) result.push(Math.ceil(Math.random() * 6));
	return [result.reduce((sum, v) => sum + v), `${result.join(',')}`];
}
function rate(rate: number, crit: number): [number, string, string, number] {
	let dmg = [];
	let roll_log = [];
	for (let i = 0; i < 100; ++i) {
		const [dice, dice_text] = roll();
		roll_log.push(dice_text);
		if (dice === 2) dmg.push('*');
		else dmg.push(rate_map[rate][dice - 3]);
		if (dice < crit) break;
	}
	return [dmg.filter(e => typeof e === 'number').reduce((sum, v) => sum + v, 0), dmg.join(','), roll_log.join(' '), dmg.length - 1]
}

const rate_map = [
	[0, 0, 0, 1, 2, 2, 3, 3, 4, 4],	// 0
	[0, 0, 0, 1, 2, 3, 3, 3, 4, 4],	// 1
	[0, 0, 0, 1, 2, 3, 4, 4, 4, 4],	// 2
	[0, 0, 1, 1, 2, 3, 4, 4, 4, 5],	// 3
	[0, 0, 1, 2, 2, 3, 4, 4, 5, 5],	// 4
	[0, 1, 1, 2, 2, 3, 4, 5, 5, 5],	// 5
	[0, 1, 1, 2, 3, 3, 4, 5, 5, 5],	// 6
	[0, 1, 1, 2, 3, 4, 4, 5, 5, 6],	// 7
	[0, 1, 2, 2, 3, 4, 4, 5, 6, 6],	// 8
	[0, 1, 2, 3, 3, 4, 4, 5, 6, 7],	// 9
	[1, 1, 2, 3, 3, 4, 5, 5, 6, 7],	// 10

	[1, 2, 3, 3, 3, 4, 5, 6, 6, 7],	// 11
	[1, 2, 3, 3, 4, 4, 5, 6, 6, 7],	// 12
	[1, 2, 3, 3, 4, 4, 5, 6, 7, 7],	// 13
	[1, 2, 3, 4, 4, 4, 5, 6, 7, 8],	// 14
	[1, 2, 3, 4, 4, 5, 5, 6, 7, 8],	// 15
	[1, 2, 3, 4, 4, 5, 6, 7, 7, 8],	// 16
	[1, 2, 3, 4, 5, 5, 6, 7, 7, 8],	// 17
	[1, 2, 3, 4, 5, 6, 6, 7, 7, 8],	// 18
	[1, 2, 3, 4, 5, 6, 7, 7, 8, 9],	// 19
	[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],	// 20

	[1, 2, 3, 4, 6, 6, 7, 8, 9, 10],	// 21
	[1, 2, 3, 5, 6, 6, 7, 8, 9, 10],	// 22
	[2, 2, 3, 5, 6, 7, 7, 8, 9, 10],	// 23
	[2, 3, 4, 5, 6, 7, 7, 8, 9, 10],	// 24
	[2, 3, 4, 5, 6, 7, 8, 8, 9, 10],	// 25
	[2, 3, 4, 5, 6, 8, 8, 9, 9, 10],	// 26
	[2, 3, 4, 6, 6, 8, 8, 9, 9, 10],	// 27
	[2, 3, 4, 6, 6, 8, 9, 9, 10, 10],	// 28
	[2, 3, 4, 6, 7, 8, 9, 9, 10, 10],	// 29
	[2, 4, 4, 6, 7, 8, 9, 10, 10, 10],	// 30
]
/*
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 1
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 2
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 3
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 4
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 5
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 6
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 7
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 8
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 9
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],	// 0
*/